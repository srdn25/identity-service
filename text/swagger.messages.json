{
  "tags": {
    "user": {
      "tag": "users",
      "description": "The customer user"
    },
    "provider": {
      "tag": "provider",
      "description": "Authorization providers"
    },
    "customer": {
      "tag": "customer",
      "description": "The customer"
    },
    "info": {
      "tag": "info",
      "description": "service info"
    },
    "auth": {
      "tag": "auth",
      "description": "user authorization and authentication"
    }
  },
  "requests": {
    "app": {
      "ping": {
        "name": "Ping",
        "description": "Check API is alive"
      }
    },
    "auth": {
      "authenticate": {
        "name": "Authenticate the user",
        "description": "Check valid the user credentials to active provider of the customer"
      }
    },
    "user": {
      "getAll": {
        "name": "Get all users by customer",
        "description": "Get all the customer users"
      },
      "create": {
        "name": "Create user",
        "description": "Create user"
      },
      "get": {
        "name": "Find user",
        "description": "Find one by email or id"
      },
      "delete": {
        "name": "Delete user",
        "description": "Delete one user by email or id"
      },
      "update": {
        "name": "Update user",
        "description": "Update one user by email or id. Only if the user belongs to customer"
      }
    },
    "provider": {
      "callback": {
        "name": "Receive webhook data from authorization provider",
        "description": "Endpoint for receive authorization data from provider",
        "params": {
          "provider": "Provider type"
        }
      },
      "authorization": {
        "name": "Send request to authorization",
        "description": "Return link for open provider auth page, than wait response on callback endpoint"
      },
      "createProvider": {
        "name": "Create new a provider",
        "description": "Create new provider for the customer"
      }
    }
  },
  "entities": {
    "user": {
      "id": {
        "description": "Unique user identifier"
      },
      "email": {
        "description": "Unique user email"
      },
      "featureFlag": {
        "description": "User feature flags, handled on client side"
      }
    },
    "provider": {
      "id": {
        "description": "Unique provider identifier"
      },
      "name": {
        "description": "Name of the provider"
      },
      "active": {
        "description": "Flag for mark active the customer provider"
      },
      "config": {
        "description": "Config for connect to provider"
      },
      "customerId": {
        "description": "The customer ID - owner of this provider"
      },
      "providerTypeId": {
        "description": "A provider type ID - customer choose it from available providers"
      }
    },
    "providerType": {
      "id": {
        "description": "Unique provider type identifier"
      },
      "type": {
        "description": "Provider name"
      }
    },
    "customer": {
      "id": {
        "description": "Unique customer identifier"
      },
      "name": {
        "description": "Customer name"
      },
      "login": {
        "description": "Login for get access token to identity service"
      },
      "password": {
        "description": "Password for get access token to identity service"
      },
      "staticToken": {
        "description": "Static token without expiry time. User can refresh the token"
      }
    },
    "customerJwtPayload": {
      "providerId": "Unique the provider ID",
      "customerId": "Unique the customer ID"
    }
  },
  "types": {
    "authState": {
      "customerId": "The customer ID",
      "providerId": "The provider ID",
      "providerName": "The provider name"
    },
    "accessTokenResponse": {
      "accessToken": "The token that your application sends to authorize a Google API request.",
      "expiresIn": "The remaining lifetime of the access token in seconds.",
      "refreshToken": "A token that you can use to obtain a new access token. Refresh tokens are valid until the user revokes access. Again, this field is only present in this response if you set the access_type parameter to offline in the initial request to Google's authorization server.",
      "scope": "The scopes of access granted by the access_token expressed as a list of space-delimited, case-sensitive strings.",
      "tokenType": "The type of token returned. At this time, this field's value is always set to Bearer."
    },
    "callbackReqQuery": {
      "state": "",
      "code": "",
      "scope": "",
      "authuser": "",
      "prompt": ""
    }
  },
  "methods": {
    "provider": {
      "requestToken": {
        "description": "Method for get or update authorization token",
        "properties": {
          "scope": "A space-delimited list of scopes that identify the resources that your application could access on the user's behalf. These values inform the consent screen that Google displays to the user.",
          "accessType": "Indicates whether your application can refresh access tokens when the user is not present at the browser. Valid parameter values are online, which is the default value, and offline.",
          "responseType": "Determines whether the Google OAuth 2.0 endpoint returns an authorization code. Set the parameter value to code for web server applications.",
          "state": "Specifies any string value that your application uses to maintain state between your authorization request and the authorization server's response. The server returns the exact value that you send as a name=value pair in the URL query component (?) of the redirect_uri after the user consents to or denies your application's access request.",
          "redirectUrl": "Determines where the API server redirects the user after the user completes the authorization flow. The value must exactly match one of the authorized redirect URIs for the OAuth 2.0 client, which you configured in your client's API Console Credentials page.",
          "clientId": "The client ID for your application. You can find this value in the API Console Credentials page."
        }
      },
      "authLinkResponse": {
        "description": "Link for open provider authorization page"
      },
      "prepareConfig": {
        "description": "Validate client config for provider and prepare it for use. Credentials for provider should provide by client"
      }
    }
  }
}